{"version":3,"sources":["UserTable/UserTable.js","App.js","serviceWorker.js","index.js"],"names":["UserTable","props","employees","map","employee","name","first","gender","location","city","country","App","state","getEmployees","type","a","axios","get","response","console","log","setState","data","results","filteredEmployees","filter","handleChange","event","target","value","this","className","onChange","id","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8TA2BeA,MAzBf,SAAmBC,GAClB,IAAMC,EAAaD,EAAMC,UAAUC,KAAI,SAAAC,GACnC,OACG,4BACC,4BAAKA,EAASC,KAAKC,OACnB,4BAAKF,EAASG,QACd,4BAAKH,EAASI,SAASC,KAAO,IAAML,EAASI,SAASE,aAK3D,OACI,+BACC,4BACI,oCACA,sCACD,yCAGFR,ICyBKS,E,4MAvCbC,MAAQ,CACNV,UAAW,I,EAKbW,a,uCAAe,WAAOC,EAAMP,GAAb,iBAAAQ,EAAA,sEACWC,IAAMC,IAAI,0CADrB,OACPC,EADO,OAEbC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZnB,UAAWgB,EAASI,KAAKC,UAGd,WAATT,IACGU,EAAqBN,EAASI,KAAKC,QAAQE,QAAO,SAAArB,GAAQ,OAAIA,EAASG,SAAWA,KACxF,EAAKc,SAAS,CAACnB,UAAWsB,KATd,2C,0DAafE,aAAe,SAAAC,GACf,EAAKd,aAAa,SAAUc,EAAMC,OAAOC,OACvCV,QAAQC,IAAIO,EAAMC,OAAOC,Q,kEAjBzBC,KAAKjB,iB,+BAoBL,OACE,yBAAKkB,UAAU,OACf,kBAAC,EAAD,CACC7B,UAAa4B,KAAKlB,MAAMV,YAEzB,4BAAQ8B,SAAUF,KAAKJ,aAAcrB,KAAK,SAAS4B,GAAG,UACrD,4BAAQJ,MAAM,QAAd,QACC,4BAAQA,MAAM,UAAd,gB,GAhCUK,IAAMC,WCMJC,QACW,cAA7BC,OAAO7B,SAAS8B,UAEe,UAA7BD,OAAO7B,SAAS8B,UAEhBD,OAAO7B,SAAS8B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.fd2b12e6.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction UserTable(props) {\r\n const employees =  props.employees.map(employee => {\r\n     return (\r\n        <tr>\r\n         <td>{employee.name.first}</td>\r\n         <td>{employee.gender}</td>\r\n         <td>{employee.location.city + \",\" + employee.location.country}</td>\r\n        </tr> \r\n\r\n     )\r\n    })\r\n    return (\r\n        <table>\r\n         <tr>\r\n             <th>Name</th>\r\n             <th>Gender</th>\r\n            <th>Location</th>\r\n            \r\n         </tr>\r\n         {employees}\r\n        </table>\r\n    )\r\n}\r\n\r\n\r\nexport default UserTable","import React from 'react';\nimport './App.css';\nimport axios from \"axios\"\nimport UserTable from \"./UserTable/UserTable\"\n\n\nclass App extends React.Component {\n  state = {\n    employees: []\n  }\n  componentDidMount() {\n    this.getEmployees()\n  }\n  getEmployees = async (type, gender) => {\n    const response = await  axios.get(\"https://randomuser.me/api/?results=100\")\n    console.log(response)\n    this.setState({\n      employees: response.data.results\n\n    })\n    if (type === \"filter\") {\n     const filteredEmployees =  response.data.results.filter(employee => employee.gender === gender)\n     this.setState({employees: filteredEmployees})\n    }\n }\n\n  handleChange = event => {\n  this.getEmployees(\"filter\", event.target.value)\n    console.log(event.target.value)\n  }\n  render() {\n    return (\n      <div className=\"App\">\n      <UserTable \n       employees = {this.state.employees}\n      />\n      <select onChange={this.handleChange} name=\"gender\" id=\"gender\">\n       <option value=\"male\">Male</option>\n        <option value=\"female\">Female</option>\n       </select>\n     </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}